     1                                  %include "./lib64.asm"
     1                              <1>          section .text     ; ������� ����
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; �� ����� �����
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
    17 00000021 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
    18 00000024 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; ����� ������ � ������
    20 0000002A 48FFCF              <1>          dec    rdi    ; ��������� ��������� ��  
    21                              <1>                        ; ���������� �������
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; ����� ����������+����
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; ����� ����������+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; ���������� ����
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; ������ ����������
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; ��������� ����� �������� ������
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; ���������� ����
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; �������� ������� �����
    49 00000064 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    50 00000065 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    53 0000006B 722F                <1>          jb     .Error  ; "����" � ������
    54 0000006D 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    55 0000006F 772B                <1>          ja     .Error  ; "����" � ������
    56 00000071 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    57 00000073 6698                <1>          cbw            ; ��������� �� �����
    58 00000075 6650                <1>          push   ax      ; ��������� � �����
    59 00000077 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    60 0000007B 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    61 0000007E 665F                <1>          pop    di      ; � DI � ��������� �����
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
     2                                  
     3                                  %macro write_string 2
     4                                      ; вывод
     5                                      ; 1 - адрес строки, 2 - длина строки
     6                                      mov     rax, 1          ; системная функция 1 (write)
     7                                      mov     rdi, 1          ; дескриптор файла stdout=1
     8                                      mov     rsi, %1         ; адрес выводимой строки
     9                                      mov     rdx, %2         ; длина строки
    10                                      syscall                 ; вызов системной функции
    11                                  %endmacro
    12                                  
    13                                  %macro read_string 2
    14                                      ; ввод
    15                                      ; 1 - буфер ввода, 2 - длина буфера ввода
    16                                      mov     rax, 0          ; системная функция 0 (read)
    17                                      mov     rdi, 0          ; дескриптор файла stdin=0
    18                                      mov     rsi, %1         ; адрес вводимой строки
    19                                      mov     rdx, %2         ; длина строки
    20                                      syscall                 ; вызов системной функции
    21                                  %endmacro
    22                                  
    23                                  %macro StrToInt 1
    24                                      ; перевод string в integer
    25                                      ; rsi должен содержать адрес строки для преобразования
    26                                      call    StrToInt64          ; вызов процедуры
    27                                      cmp     rbx, 0              ; сравнение кода возврата
    28                                      jne     StrToInt64.Error    ; обработка ошибки
    29                                      mov     %1, eax            
    30                                  %endmacro
    31                                  
    32                                  %macro IntToStr 2
    33                                      ; перевод integer в string
    34                                      mov     rsi, %2
    35                                      mov     ax, %1             ; получение числа из памяти
    36                                      cwde
    37                                      call    IntToStr64          ; вызов процедуры
    38                                      cmp     rbx, 0              ; сравнение кода возврата
    39                                      jne     StrToInt64.Error    ; обработка ошибки         
    40                                  %endmacro
    41                                  
    42                                      section .data
    43 00000000 456E74657220612C20-     InputMsg db "Enter a, c, k, l", 10
    43 00000009 632C206B2C206C0A   
    44                                  lenInput equ $-InputMsg
    45 00000011 61203D20                aInput db "a = "
    46                                  aLen equ $-aInput
    47 00000015 63203D20                cInput db "c = "
    48                                  cLen equ $-cInput
    49 00000019 6B203D20                kInput db "k = "
    50                                  kLen equ $-kInput
    51 0000001D 6C203D20                lInput db "l = "
    52                                  lLen equ $-lInput
    53 00000021 526573756C743A2078-     OutputMsg db "Result: x = "
    53 0000002A 203D20             
    54                                  lenOutput equ $-OutputMsg
    55 0000002D 632063616E6E6F7420-     ErrorMsg db "c cannot be 0", 10
    55 00000036 626520300A         
    56                                  lenError equ $-ErrorMsg
    57                                  
    58                                      section .bss
    59 00000000 <res 0000000A>          InBuf resb 10
    60                                  lenIn equ $-InBuf
    61 0000000A <res 0000000A>          OutBuf resb 10
    62 00000014 <res 00000002>          a resw 1
    63 00000016 <res 00000002>          c resw 1
    64 00000018 <res 00000002>          k resw 1
    65 0000001A <res 00000002>          l resw 1
    66 0000001C <res 00000002>          x resw 1
    67                                  
    68                                      section .text
    69                                      global _start
    70                                  
    71                                  _start:
    72                                      ; ввод
    73                                      
    74                                      write_string InputMsg, lenInput
    74                              <1> 
    74                              <1> 
    74 000000A9 B801000000          <1>  mov rax, 1
    74 000000AE BF01000000          <1>  mov rdi, 1
    74 000000B3 48BE-               <1>  mov rsi, %1
    74 000000B5 [0000000000000000]  <1>
    74 000000BD BA11000000          <1>  mov rdx, %2
    74 000000C2 0F05                <1>  syscall
    75                                  
    76                                      write_string aInput, aLen
    76                              <1> 
    76                              <1> 
    76 000000C4 B801000000          <1>  mov rax, 1
    76 000000C9 BF01000000          <1>  mov rdi, 1
    76 000000CE 48BE-               <1>  mov rsi, %1
    76 000000D0 [1100000000000000]  <1>
    76 000000D8 BA04000000          <1>  mov rdx, %2
    76 000000DD 0F05                <1>  syscall
    77                                      read_string InBuf, lenIn
    77                              <1> 
    77                              <1> 
    77 000000DF B800000000          <1>  mov rax, 0
    77 000000E4 BF00000000          <1>  mov rdi, 0
    77 000000E9 48BE-               <1>  mov rsi, %1
    77 000000EB [0000000000000000]  <1>
    77 000000F3 BA0A000000          <1>  mov rdx, %2
    77 000000F8 0F05                <1>  syscall
    78                                      StrToInt [a]
    78                              <1> 
    78                              <1> 
    78 000000FA E853FFFFFF          <1>  call StrToInt64
    78 000000FF 4883FB00            <1>  cmp rbx, 0
    78 00000103 7597                <1>  jne StrToInt64.Error
    78 00000105 890425[14000000]    <1>  mov %1, eax
    79                                  
    80                                      write_string cInput, cLen
    80                              <1> 
    80                              <1> 
    80 0000010C B801000000          <1>  mov rax, 1
    80 00000111 BF01000000          <1>  mov rdi, 1
    80 00000116 48BE-               <1>  mov rsi, %1
    80 00000118 [1500000000000000]  <1>
    80 00000120 BA04000000          <1>  mov rdx, %2
    80 00000125 0F05                <1>  syscall
    81                                      read_string InBuf, lenIn
    81                              <1> 
    81                              <1> 
    81 00000127 B800000000          <1>  mov rax, 0
    81 0000012C BF00000000          <1>  mov rdi, 0
    81 00000131 48BE-               <1>  mov rsi, %1
    81 00000133 [0000000000000000]  <1>
    81 0000013B BA0A000000          <1>  mov rdx, %2
    81 00000140 0F05                <1>  syscall
    82                                      StrToInt [c]
    82                              <1> 
    82                              <1> 
    82 00000142 E80BFFFFFF          <1>  call StrToInt64
    82 00000147 4883FB00            <1>  cmp rbx, 0
    82 0000014B 0F854BFFFFFF        <1>  jne StrToInt64.Error
    82 00000151 890425[16000000]    <1>  mov %1, eax
    83                                  
    84                                      write_string kInput, kLen
    84                              <1> 
    84                              <1> 
    84 00000158 B801000000          <1>  mov rax, 1
    84 0000015D BF01000000          <1>  mov rdi, 1
    84 00000162 48BE-               <1>  mov rsi, %1
    84 00000164 [1900000000000000]  <1>
    84 0000016C BA04000000          <1>  mov rdx, %2
    84 00000171 0F05                <1>  syscall
    85                                      read_string InBuf, lenIn
    85                              <1> 
    85                              <1> 
    85 00000173 B800000000          <1>  mov rax, 0
    85 00000178 BF00000000          <1>  mov rdi, 0
    85 0000017D 48BE-               <1>  mov rsi, %1
    85 0000017F [0000000000000000]  <1>
    85 00000187 BA0A000000          <1>  mov rdx, %2
    85 0000018C 0F05                <1>  syscall
    86                                      StrToInt [k]
    86                              <1> 
    86                              <1> 
    86 0000018E E8BFFEFFFF          <1>  call StrToInt64
    86 00000193 4883FB00            <1>  cmp rbx, 0
    86 00000197 0F85FFFEFFFF        <1>  jne StrToInt64.Error
    86 0000019D 890425[18000000]    <1>  mov %1, eax
    87                                  
    88                                      write_string lInput, lLen
    88                              <1> 
    88                              <1> 
    88 000001A4 B801000000          <1>  mov rax, 1
    88 000001A9 BF01000000          <1>  mov rdi, 1
    88 000001AE 48BE-               <1>  mov rsi, %1
    88 000001B0 [1D00000000000000]  <1>
    88 000001B8 BA04000000          <1>  mov rdx, %2
    88 000001BD 0F05                <1>  syscall
    89                                      read_string InBuf, lenIn
    89                              <1> 
    89                              <1> 
    89 000001BF B800000000          <1>  mov rax, 0
    89 000001C4 BF00000000          <1>  mov rdi, 0
    89 000001C9 48BE-               <1>  mov rsi, %1
    89 000001CB [0000000000000000]  <1>
    89 000001D3 BA0A000000          <1>  mov rdx, %2
    89 000001D8 0F05                <1>  syscall
    90                                      StrToInt [l]
    90                              <1> 
    90                              <1> 
    90 000001DA E873FEFFFF          <1>  call StrToInt64
    90 000001DF 4883FB00            <1>  cmp rbx, 0
    90 000001E3 0F85B3FEFFFF        <1>  jne StrToInt64.Error
    90 000001E9 890425[1A000000]    <1>  mov %1, eax
    91                                  
    92 000001F0 668B0425[16000000]          mov ax, [c]
    93 000001F8 6683F800                    cmp ax, 0
    94 000001FC 0F84A2000000                je catch
    95                                  
    96                                      ; вычисления
    97                                  
    98 00000202 668B0425[1A000000]          mov AX, [l]  ; ax = l;
    99 0000020A 662B0425[14000000]          sub AX, [a]  ; ax -= a;
   100 00000212 66F7E8                      imul AX      ; ax *= ax; // dx:ax = ax*ax;
   101 00000215 668B1C25[16000000]          mov BX, [c]  ; bx = c;
   102 0000021D 66F7FB                      idiv BX      ; ax = dx:ax / bx;
   103 00000220 66030425[18000000]          add AX, [k]  ; ax += k;
   104 00000228 662B0425[1A000000]          sub AX, [l]  ; ax -= l;
   105 00000230 668B1C25[16000000]          mov BX, [c]  ; bx = c;
   106 00000238 66D1FB                      sar BX, 1    ; bx >> 1;
   107 0000023B 6601D8                      add AX, BX   ; ax += bx;
   108 0000023E 66890425[1C000000]          mov [x], AX  ; x = ax
   109                                      
   110                                      ; вывод
   111                                  
   112 00000246 4831DB                      xor rbx, rbx
   113                                      write_string OutputMsg, lenOutput
   113                              <1> 
   113                              <1> 
   113 00000249 B801000000          <1>  mov rax, 1
   113 0000024E BF01000000          <1>  mov rdi, 1
   113 00000253 48BE-               <1>  mov rsi, %1
   113 00000255 [2100000000000000]  <1>
   113 0000025D BA0C000000          <1>  mov rdx, %2
   113 00000262 0F05                <1>  syscall
   114                                      IntToStr [x], OutBuf
   114                              <1> 
   114 00000264 48BE-               <1>  mov rsi, %2
   114 00000266 [0A00000000000000]  <1>
   114 0000026E 668B0425[1C000000]  <1>  mov ax, %1
   114 00000276 98                  <1>  cwde
   114 00000277 E884FDFFFF          <1>  call IntToStr64
   114 0000027C 4883FB00            <1>  cmp rbx, 0
   114 00000280 0F8516FEFFFF        <1>  jne StrToInt64.Error
   115 00000286 4889C3                      mov RBX, RAX
   116                                      write_string OutBuf, RBX
   116                              <1> 
   116                              <1> 
   116 00000289 B801000000          <1>  mov rax, 1
   116 0000028E BF01000000          <1>  mov rdi, 1
   116 00000293 48BE-               <1>  mov rsi, %1
   116 00000295 [0A00000000000000]  <1>
   116 0000029D 4889DA              <1>  mov rdx, %2
   116 000002A0 0F05                <1>  syscall
   117 000002A2 EB1B                        jmp exit
   118                                  
   119                                      catch:
   120                                          write_string ErrorMsg, lenError
   120                              <1> 
   120                              <1> 
   120 000002A4 B801000000          <1>  mov rax, 1
   120 000002A9 BF01000000          <1>  mov rdi, 1
   120 000002AE 48BE-               <1>  mov rsi, %1
   120 000002B0 [2D00000000000000]  <1>
   120 000002B8 BA0E000000          <1>  mov rdx, %2
   120 000002BD 0F05                <1>  syscall
   121                                  
   122                                      exit:
   123 000002BF B83C000000                      mov     rax, 60         ; системная функция 60 (exit)
   124 000002C4 4831FF                          xor     rdi, rdi        ; return code 0    
   125 000002C7 0F05                            syscall                 ; вызов системной функции
